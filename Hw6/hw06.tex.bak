\documentclass[letterpaper,11pt]{article}

\usepackage{fullpage}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{hyperref}
\usepackage{algorithm}
\usepackage[noend]{algpseudocode}
\newtheorem{theorem}{Theorem}[section]

\begin{document}
\noindent{COSC 302: Analysis of Algorithms --- Spring 2018}

\noindent{Prof. Darren Strash}





This is an \emph{individual} assignment: collaboration (such as discussing problems and brainstorming ideas for solving them) on this assignment is highly encouraged, but the work you submit must be your own. Give information only as a tutor would: ask questions so that your classmate is able to figure out the answer for themselves. It is unacceptable to share any artifacts, such as code and/or write-ups for this assignment. If you work with someone in close collaboration, you must mention your collaborator on your assignment.

\emph{Suggested practice problems, from CLRS:} 22.1-1 through 22.1-5; 22.1-6 (challenge); 22.2-3; 22.2-6; 22.-3-6; 22.3-8; 22.3-11; 22.4-2; 22.4-5; 22.5-3; 22.5-4

\begin{enumerate}

\item \textbf{(From problem set 5; previous exam question)} Let $A[1..n]$ be an array of non-integers taken from some set $K$ of size $k>1$. \emph{(Note: For this problem, you are not given the set $K$ or $k$; this is only to illustrate that there are $k$ distinct non-integer numbers. We only have access to elements through $A$. Further, note that $k$ may be small or large: from constant to even larger than $n$.)}
\begin{enumerate}
\item 
An algorithm that sorts $A$ is described as a counting sort that iterates through the $A$, when a new key is found a node with a varible count is created and inserted in the binary search tree $B$. In the case of key we have already found we will increment the count value in the appropriate node. Going through the array will take $n$ time. Then for $k$ disinct keys we will create a mode which will take at most $lg k$ time. So, the entire algorithm will take $O(n + klg(k))$. 
\item 
The worst-case running time for my algorithm would be $O(n lg n)$. Since there would be at most $n$ distinct keys where there are no repeated values.
\end{enumerate}

\item Let $G=(V,E)$ be an $n$-vertex undirected graph consisting of \emph{cops} and \emph{robbers} as vertices. You are given two facts about the graph:
\begin{enumerate}
\item $G$ is connected, and
\item each edge is incident to exactly one cop and one robber. (That is, no edge is incident to two cops, and no edge is incident to two robbers.)
\end{enumerate}
Suppose we know that Dave $\in V$ is a cop. Give an efficient algorithm to distinguish all cops from all robbers.

We will find all cops and robbers by using a modified breadth-first search. Since Dave $/in$ V and is a cop, there will be a set of neighbors. Since each edge is incident to only one cop and one robber. All of of Dave's neighbors would be robbers. Then each of the robber's neighbors that haven't been visited are cops ad well. And the search will reach every node since the graph is connected. 
\item Problem 22.2-5 from CLRS.

\item Problem 22.5-1 from CLRS. In addition to stating your answer, also (formally) prove its correctness.

When a edge is added the amount of strongly connected components can either stay the same if the edge is incident to two nodes in the same component or decrease by $1$ if the edge is added between $2$ components.
 
\item 
\begin{algorithm}
\begin{algorithmic}[1]
\Function{Semiconnected-Check}{$G$}
\State $G_R \gets$ \Call{Strongly-Connected-Components}{$G$}
\State $s \gets G_R[0]$
\State \Call{DFS-Visit}{$G_R$,$s$}
\ForAll{$u \in G_R$}
\If {$u.color == WHITE$}
\State \Return false
\EndIf
\EndFor
\State \Return true
\EndFunction
\end{algorithmic}
\end{algorithm}

\end{enumerate}

\end{document}
