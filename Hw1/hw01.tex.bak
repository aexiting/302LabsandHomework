\documentclass[letterpaper,11pt]{article}
\usepackage[noend]{algpseudocode}
\usepackage{algorithm}
\usepackage{fullpage}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{hyperref}

\newtheorem{theorem}{Theorem}[section]

\begin{document}

\noindent{Adam Pettway}


\noindent{Colgate University} 

\noindent{\bf Problem Set 1 --- Invariants and Induction} 

\begin{enumerate}
\item Problem 2.1-3 \\
\begin{algorithm}[!h]
\textsc{Linear-Search}($A$,$k$)
\begin{algorithmic}
\For{$j = $ \textbf{to} $A$.length}
\If{ $A[i] = k$  }
\EndIf 
\Return \\
\EndFor
\Return NULL
\end{algorithmic}
\end{algorithm}\\
Invariant: The start of each iteration A[1...i-1] are not equal to v.\\
Initialization: i = 1 and is less than A.length.
Maintence: During each step in the for loop we know that if we got to point A[i] then A[1...i] does not equal k. Otherwise the function would return. This perservers the invariant.\\
Termination: The loop terminates if i > A.length since i increases by one very time we know that A[1...i-1] does not equal k. And since i-1 == A.length this is the entire array and we return NULL since k does exist in the array.
\item Problem 2-2 in CLRS, 3rd edition. 
<<<<<<< HEAD
\begin{enumerate}
\item We need to prove that the array is a permunation of the input array.

\item 
Initialization: It is the last element of A in the array \\
Maintence: Switch A[j] and A[j-1] if it is smaller this means that the smallest item is always closer to the right.\\
Termination: After the loop finishes j = i which implies that i is the smallest element from the right of the array.
\item
Initialization: We start with the original array which holds.\\
Maintence: A[i] is the smallest of the array for every loop iteration while the rest that are right of the array are shuffled, this implies that A[1..i] are sorted.\\
Termination: After the loop finishes i = n. Which means that A[1..n] are sorted and this is the entire array.
\item
The worst worst-case for bubble sort is $O(n^2)$. This happens in a reversely ordered list where each inner loop takes n accesses.
\end{enumerate}
\item Prove by induction that for every non-negative integer $n$
\[\sum_{k=0}^{n} k^2 = \frac{n(n+1)(2n+1)}{6}.\] 
\begin{proof}
Base case: $n=0$, then both $\sum_{i=0}^{0}i^2 = 0$ and $\frac{0(0+1)(0+1)}{6}= 0$.

Inductive step: Assume that $\sum_{i=0}^{k-1}i = \frac{k(k+1)(2k+1)}{6}$. 
\begin{align*}
\sum_{i=0}^{k+1}i^2 &= \sum_{i=0}^{k}i^2 + (k+1)^2&\\
                &= \frac{(k)(k+1)(2k+1)}{6}+ (k+1)^2&\text{I.H.}\\
                &= \frac{(k+1)[(k)(2k+1)6(k+1)^2]}{6}&\\
                &= \frac{(k+1)(2k^2+7k-6)}{6}&\\
                &= \frac{(k+1)(k+2)(2k+3)}{6}.&
\end{align*}
\end{proof}

\newpage

\item Prove that given an unlimited supply of 6-cent coins, 10-cent coins, and 15-cent coins, one can make any amount of change larger than 29 cents.
\begin{proof}
Let $p$ be value of the coins we can make. We have two cases: $29 < p \leq 35$, and $p > 35$.

Case 1: We begin with $p > 35$.
We inductively assume that we can make $p-6$ cents worth of postage (which is greater than $29$). Then we add a $6$-cent stamp to get $p = (p-6) + 6$ cents of postage.

Case 2: We now show it is true for $29 < p \leq 35$, by manually showing that each value $p$ is a sum of $6$'s  $10$'s and $15$'s. 

$p = 30 = 15+ 15$

$p = 31 = 6+15+10$

$p = 32 = 6 + 6 + 10 + 10$

$p = 33 = 6 + 6 + 6 + 15$

$p = 34 = 6 + 6 + 6 + 6 +10$

$p = 35 = 15 + 10 + 10$

\end{proof}
=======


\item Prove by induction that for every non-negative integer $n$
\[\sum_{k=0}^{n} k^2 = \frac{n(n+1)(2n+1)}{6}.\]
\item Prove that given an unlimited supply of 6-cent coins, 10-cent coins, and 15-cent coins, one can make any amount of change larger than 29 cents.
>>>>>>> 60ddd8377ef7bee17b2d33b1ecf4e9af44efd1dd
\end{enumerate}

\end{document}
